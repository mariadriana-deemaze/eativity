// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MeasurementUnit {
  IMPERIAL
  METRIC
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Goal {
  GAIN
  LOSS
  MAINTENANCE
}

enum GoalDiff {
  QUARTER // 0.25
  HALF // 0.5
  HALF_AND_QUARTER // 0.75
  ONE // 1
}

enum MealLogType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model User {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  name            String
  email           String          @unique
  password_hash   String
  measurementUnit MeasurementUnit @default(METRIC)
  birthdate       DateTime?
  gender          Gender?
  height          Int?
  weight          Weight[]
  meals           MealLog[]
  plan            Plan?
  foods           Food[]
  recipes         Recipe[]
}

model RecipeCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  image     String
  title     String
  foodId    Int?
  recipe    Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId  Int?
}

model Food {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  name          String
  description   String?
  barcode       String?      @unique
  calories      Int
  carbohydrates Int
  proteins      Int
  fats          Int
  servingSize   Int
  image         String?
  foodRecipe    FoodRecipe[]
  user          User?        @relation(fields: [userId], references: [id])
  userId        Int?
  meal          MealLog[]
}

model Recipe {
  id            Int              @id @default(autoincrement())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now())
  user          User?            @relation(fields: [userId], references: [id])
  userId        Int?
  name          String
  description   String?
  calories      Int
  carbohydrates Int
  proteins      Int
  fats          Int
  image         String?
  foodRecipe    FoodRecipe[]
  categories    RecipeCategory[]
}

model FoodRecipe {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  recipeId  Int
  foodId    Int
  food      Food     @relation(fields: [foodId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@unique([recipeId, foodId], name: "recipe_food_unique")
}

model MealLog {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  type      MealLogType
  quantity  Int         @default(1)

  food   Food @relation(fields: [foodId], references: [id])
  foodId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Weight {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  weight    Int
  createdAt DateTime @default(now())
  userId    Int
}

model Plan {
  id                                   Int      @id @default(autoincrement())
  createdAt                            DateTime @default(now())
  updatedAt                            DateTime @default(now())
  user                                 User     @relation(fields: [userId], references: [id])
  userId                               Int      @unique
  goal                                 Goal
  goal_diff                            GoalDiff
  weekly_training_amount               Int
  average_minutes_per_training_session Int
}
